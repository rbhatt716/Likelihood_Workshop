library(expm)
library(tidyr)
library(data.table)
library(RCurl)
data7=read.csv("CAV_RB.csv")
qmatrix = rbind(c(0,0.13,0,0.61), c(0,0,0.66,0.61), c(0,0,0,0.61), c(0,0,0,0))
ematrix = rbind(c(0,0,0,0), c(0,0,0,0), c(0,0,0,0), c(0,0,0,0))
maxit       <- 10000
fnscale     <- length(unique(data7$PTNUM))*10
method      <- "Nelder-Mead" #"BFGS" #Nelder-Mead"
center      <- FALSE
reltol      <- 1e-8
res = msm(state ~ age ,subject = PTNUM,data=data7,covariates = ~age ,qmatrix = qmatrix,ematrix = ematrix,qconstraint = c(1,2,3,2,2),constraint = list(age = c(1,2,3,2,2))
,deathexact = c(4),censor = -1, censor.states = list(c(1,2,3)),center = F,
method  = method,control=list( trace=0, REPORT=1,maxit=maxit,
reltol=reltol,fnscale=fnscale))
res$opt$par
hessian = res$opt$hessian
cov_mat = solve(hessian)
variances = diag(cov_mat)
se = sqrt(variances)
p=res$opt$par
p=res$opt$par
e_constrain = NULL
e_constrain_cov = c(NULL)
constrain = c(1,2,3,2,2)
covariates = list("age","age","age")
covariates_name = c("age")
Qm = rbind(c(0,0.13,0,0.61), c(0,0,0.66,0.61), c(0,0,0,0.61), c(0,0,0,0))
E_covariates_name = NULL
E_covariates = list(NULL)
ematrix = rbind(c(0,0,0,0), c(0,0,0,0), c(0,0,0,0), c(0,0,0,0))
dta = data7
ids = "PTNUM"
time_name = "age"
state_name  = "state"
dta_1 = dta %>% select(ids,time_name,state_name)
dta_1 = dta_1 %>% rename(id  = ids, age = time_name, state = state_name )
dta_2 = ungroup(dta) %>% select(covariates_name[covariates_name!=time_name], E_covariates_name )
dta = bind_cols(dta_1,dta_2)
covariates_name
View(dta)
time_name
dta$time = dta$age
View(dta)
p
#if the function is a gompertz i.e. covariates = NULL , then the constraints for Q matrix are added, gets covariate name in dta
all_e_cons = c(e_constrain,e_constrain_cov)
all_cons = c(constrain,all_e_cons)
all_epars = p[all_e_cons]
p=c(p[unique(constrain)], all_epars,  p[-all_cons]    )
p
constrain
res$opt$par
p=res$opt$par
e_constrain = NULL
e_constrain_cov = c(NULL)
constrain = c(1,2,3,2,2,4,5,6,5,5)
covariates = list("time","age","age")
covariates_name = c("age")
Qm = rbind(c(0,0.13,0,0.61), c(0,0,0.66,0.61), c(0,0,0,0.61), c(0,0,0,0))
E_covariates_name = NULL
E_covariates = list(NULL)
ematrix = rbind(c(0,0,0,0), c(0,0,0,0), c(0,0,0,0), c(0,0,0,0))
dta = data7
dta$time = dta$age
age_like = "age"
functions = c("gompertz","gompertz","gompertz")
no_states = ncol(Qm)
all_e_cons = c(e_constrain,e_constrain_cov)
all_cons = c(constrain,all_e_cons)
all_epars = p[all_e_cons]
c(p[unique(constrain)], all_epars,  p[-all_cons]    )
constrain
p=c(p[unique(constrain)], all_epars,  p[-all_cons]    )
covariates_name
p=res$opt$par
e_constrain = NULL
e_constrain_cov = c(NULL)
constrain = c(1,2,3,2,2,4,5,6,5,5)
covariates = list("time","time","time")
covariates_name = c("time")
Qm = rbind(c(0,0.13,0,0.61), c(0,0,0.66,0.61), c(0,0,0,0.61), c(0,0,0,0))
E_covariates_name = NULL
E_covariates = list(NULL)
ematrix = rbind(c(0,0,0,0), c(0,0,0,0), c(0,0,0,0), c(0,0,0,0))
dta = data7
dta$time = dta$age
age_like = "time"
functions = c("gompertz","gompertz","gompertz")
no_states = ncol(Qm)
all_e_cons = c(e_constrain,e_constrain_cov)
all_cons = c(constrain,all_e_cons)
all_epars = p[all_e_cons]
p=c(p[unique(constrain)], all_epars,  p[-all_cons]    )
#  covariates = lapply(covariates,function(x){
#    if(!is.null(x)){
#      temp=x
#      for( rep in 1:length(covariates_name)){temp=gsub(unique(unlist(covariates))[rep],covariates_name[rep],temp)
#      }
#      temp
#    }else{
#      NULL
#    }
#  })
rep(1,sum(Qm>0)),has_covariates
if(length(covariates_name)>0){has_covariates=sapply(covariates_name,function(x){ sapply(covariates,function(y){  ifelse(any(y==x),1,0) })  },simplify = T   )
}else{has_covariates = NULL}
c(rep(1,sum(Qm>0)),has_covariates)
all_e_cons = c(e_constrain,e_constrain_cov)
all_epars = p[all_e_cons]
p=c(p[unique(constrain)], all_epars    )
p
temp_E = ematrix
diag(temp_E)=0
c(p[unique(constrain)][constrain],p[-unique(constrain)])
#get full parameter array
p = c(p[unique(constrain)][constrain],p[-unique(constrain)])
no_qpars = ((length(covariates_name)+1)*sum(Qm>0)) # number of parameters used for the Q matrix including the parameters for covariates
no_epars = ((length(E_covariates_name)+1)*sum(ematrix>0)) # number of parameters used for the E matrix including the parameters for covariates
print(p)
no_qpars
if(length(covariates_name)>0){
dt = dta %>% group_by_(.dots = covariates_name) %>% summarise(counts = n()) %>%setDT
dt$row = as.numeric(rownames(dt))
dta.s=left_join(dta,dt)
dt = as.data.table(dt)
qlength = nrow(dt)
}else{
dt = NULL
dta.s = dta
dta.s$row = 1
qlength = 1
}
View(dt)
if(length(E_covariates_name)>0){
dt.E = dta %>% group_by_(.dots = E_covariates_name) %>% summarise(counts.e = n()) %>%setDT
dt.E$row.E = as.numeric(rownames(dt.E))
dta.s=left_join(dta.s,dt.E)
dt.E = as.data.table(dt.E)
Elength = nrow(dt.E)
}else{
dt.E = NULL
dta.s$row.E = 1
Elength = 1
}
View(dta.s)
p=res$opt$par
e_constrain = NULL
e_constrain_cov = c(NULL)
constrain = c(1,2,3,2,2,4,5,6,5,5)
covariates = list("time","time","time")
covariates_name = c("time")
Qm = rbind(c(0,0.13,0,0.61), c(0,0,0.66,0.61), c(0,0,0,0.61), c(0,0,0,0))
E_covariates_name = NULL
E_covariates = list(NULL)
ematrix = rbind(c(0,0,0,0), c(0,0,0,0), c(0,0,0,0), c(0,0,0,0))
dta = data7
dta$time = dta$age
age_like = "time"
functions = c("gompertz","gompertz","gompertz")
no_states = ncol(Qm)
dta = dta %>% select(id = PTNUM,age,state,time)
dta.s = dta.s %>% arrange(id)
dta.split <- split.data.table( as.data.table(dta.s), by = "id" )
p
all_e_cons = c(e_constrain,e_constrain_cov)
all_epars = p[all_e_cons]
p=c(p[unique(constrain)], all_epars    )
temp_E = ematrix
diag(temp_E)=0
#get full parameter array
p = c(p[unique(constrain)][constrain],p[-unique(constrain)])
c = Sys.time()
# Initialise the loglikelihood:
#################################### Contribution per individual:##################################################
no_qpars = ((length(covariates_name)+1)*sum(Qm>0)) # number of parameters used for the Q matrix including the parameters for covariates
no_epars = ((length(E_covariates_name)+1)*sum(ematrix>0)) # number of parameters used for the E matrix including the parameters for covariates
print(p)
if(length(covariates_name)>0){
dt = dta %>% group_by_(.dots = covariates_name) %>% summarise(counts = n()) %>%setDT
dt$row = as.numeric(rownames(dt))
dta.s=left_join(dta,dt)
dt = as.data.table(dt)
qlength = nrow(dt)
}else{
dt = NULL
dta.s = dta
dta.s$row = 1
qlength = 1
}
if(length(E_covariates_name)>0){
dt.E = dta %>% group_by_(.dots = E_covariates_name) %>% summarise(counts.e = n()) %>%setDT
dt.E$row.E = as.numeric(rownames(dt.E))
dta.s=left_join(dta.s,dt.E)
dt.E = as.data.table(dt.E)
Elength = nrow(dt.E)
}else{
dt.E = NULL
dta.s$row.E = 1
Elength = 1
}
dta.s = dta.s %>% arrange(id)
Q_list = lapply(1:qlength,function(j) Q_matrix(p,no_qpars,Qm,covariates_name,j,no_states=no_states,dt,functions,age_like)
)
E_list = lapply(1:Elength,function(j) E_matrix(p[(no_qpars+1):(no_qpars+no_epars)],no_epars,ematrix,E_covariates_name,j,no_states=no_states,dt.E)
)
functions
functions
hazards = function(fname,cov_vals,cov_names,age_like,params ){
if(fname == "gompertz"){
temp_covals = c(1,cov_vals)
log_gmps = sum(temp_covals*params)
exp(log_gmps)
}else if(fname=="exponential"){
temp_covals = c(1,cov_vals)
log_gmps = sum(temp_covals*params)
exp(log_gmps)
}
}
no_qpars
covariates_name
Q_list = lapply(1:qlength,function(j) Q_matrix(p,no_qpars,Qm,covariates_name,j,no_states=no_states,dt,functions,age_like)
)
View(dt)
functions
qlength
all_qpars = p[1:no_qpars]
# make a matrix, the first column is the constant parameter and the second column is the parameter of the first covariate and so on
q_pars_mat = matrix(all_qpars,sum(Qm>0),length(covariates_name)+1)
q_pars_mat
if(length(covariates_name)>0){   cov_vals = unlist(dt[j,..covariates_name])
cov_names = colnames(dt[j,..covariates_name])
}else{
cov_vals = NULL
cov_names = NULL
}
covariates_name
j=1
all_qpars = p[1:no_qpars]
# make a matrix, the first column is the constant parameter and the second column is the parameter of the first covariate and so on
q_pars_mat = matrix(all_qpars,sum(Qm>0),length(covariates_name)+1)
if(length(covariates_name)>0){   cov_vals = unlist(dt[j,..covariates_name])
cov_names = colnames(dt[j,..covariates_name])
}else{
cov_vals = NULL
cov_names = NULL
}
# sum the the values of each row i.e. the value of the log(q_ij)
qpars = sapply(1:sum(Qm>0),function(i){
fname = functions[i]
params = unlist(q_pars_mat[i,])
hazards(fname,cov_vals,cov_names,age_like,  params)
})
functions
1:sum(Qm>0)
functions = c("gompertz","gompertz","gompertz","gompertz","gompertz")
Q_list = lapply(1:qlength,function(j) Q_matrix(p,no_qpars,Qm,covariates_name,j,no_states=no_states,dt,functions,age_like)
)
covariates_name
no_states
Q_matrix[[533]]
Q_list[533]
no_qpars
matrix(all_qpars,sum(Qm>0),length(covariates_name)+1)
colnames(dt[j,..covariates_name])
unlist(dt[j,..covariates_name])
# sum the the values of each row i.e. the value of the log(q_ij)
qpars = sapply(1:sum(Qm>0),function(i){
fname = functions[i]
params = unlist(q_pars_mat[i,])
hazards(fname,cov_vals,cov_names,age_like,  params)
})
qpars
Q <- matrix(0,no_states,no_states) #create empty matrix
max(Q)
Q <- matrix(0,no_states,no_states) #create empty matrix
Q[i,][Qm[i,]>0]
1:sum(Qm[i,]>0) + max(Q)
i
i1
i1i=1
i-1
i=1
Q[i,][Qm[i,]>0] = 1:sum(Qm[i,]>0) + max(Q)
Q
Q <- matrix(0,no_states,no_states) #create empty matrix
for(i in 1:ncol(Q)){  Q[i,][Qm[i,]>0] = 1:sum(Qm[i,]>0) + max(Q) }
Q
qpars
Qm = rbind(c(0,1,0,2), c(0,0,3,4), c(0,0,0,5), c(0,0,0,0))
Qm
qpars[Q[i,][Qm[i,]>0]]
qpars
Q
Q <- matrix(0,no_states,no_states) #create empty matrix
Qm==1
for(i in 1:length(qpars)){  Q[Qm==i] = qpars[i] }
Q
for(i in 1:no_states){
Q[i,i] = -sum(Q[i,]) #ensuring the sum of the row is 0
}
Q
E_list = lapply(1:Elength,function(j) E_matrix(p[(no_qpars+1):(no_qpars+no_epars)],no_epars,ematrix,E_covariates_name,j,no_states=no_states,dt.E)
)
E_list
ematrix
length(E_covariates_name)+1
E_covariates_name
cbind(rep(1,sum(ematrix>0)))
cbind(rep(1,sum(ematrix>0)))*e_pars_mat
all_epars = p[1:no_epars]
e_pars_mat = matrix(all_epars,sum(ematrix>0),length(E_covariates_name)+1)
e_pars_mat
ecov_times_par_vals = cbind(rep(1,sum(ematrix>0)))*e_pars_mat
ecov_times_par_vals
rowSums(ecov_times_par_vals)
unname(rowSums(ecov_times_par_vals))
E = matrix(0,no_states,no_states) #create empty matrix
E[ematrix>0] <- 1:sum(ematrix>0)
E
t(E)[t(E)>0]
E[ematrix>0] <- 1:sum(ematrix>0)
tranf_E = t(E)[t(E)>0]
E[ematrix>0] = exp(epars[tranf_E])/(1+exp(epars[tranf_E]))
E
for(i in c(1:no_states)  ){
E[i,i] = 1-sum(E[i,])
}
tranf_E
E
#create E matrix
E_matrix = function(p,no_epars,ematrix,E_covariates_name=NULL,j,no_states,dt.E=NULL){
all_epars = p[1:no_epars]
e_pars_mat = matrix(all_epars,sum(ematrix>0),length(E_covariates_name)+1)
ecov_times_par_vals = cbind(rep(1,sum(ematrix>0)))*e_pars_mat
epars = unname(rowSums(ecov_times_par_vals))
E = matrix(0,no_states,no_states) #create empty matrix
E[ematrix>0] <- 1:sum(ematrix>0)
tranf_E = t(E)[t(E)>0]
E[ematrix>0] = exp(epars[tranf_E])/(1+exp(epars[tranf_E]))
for(i in c(1:no_states)  ){
E[i,i] = 1-sum(E[i,])
}
E}
log(.1/0.9)
exp(-2.2)/(1+exp(-2.2))
dta.p = dta.s %>% group_by(id) %>% mutate(lead_time = lead(age),
interval = lead_time-age
)
dta.p$interval[is.na(dta.p$interval)] = 0
dt.p = dta.p %>% group_by(row,interval) %>% summarise(counts = n())
dt.p$row.p = as.numeric(rownames(dt.p))
dt.p = as.data.table(dt.p)
dta.p$counts=NULL
dta.p=left_join(dta.p,dt.p)
dta.p = as.data.table(ungroup(dta.p))
View(dta.p)
dt.p$row.p
P_list =     lapply(dt.p$row.p,function(j){
P_matrix(Q_list,dt.p,j)   } )
j
Q_list[[  dta.i[j,row]    ]]
dta.i[j,interval]
P_matrix = function(Q_list,dt.p,j){
# creating the P, here Q is assumed constant from t[j-1] to t[j]
Q = Q_list[[  dta.i[j,row]    ]]
t = dta.i[j,interval]
# c = Sys.time();P <-expm(  (t2-t1)*Q,method = "hybrid_Eigen_Ward",order = 17,tol = 10^-(40));   d = Sys.time()
# print(d-c)
P <-expm( t*Q)
P
}
P_list =     lapply(dt.p$row.p,function(j){
P_matrix(Q_list,dt.p,j)   } )
Q = Q_list[[  dta.i[j,row]    ]]
t = dta.i[j,interval]
expm( t*Q)
P_matrix = function(Q_list,dt.p,j){
# creating the P, here Q is assumed constant from t[j-1] to t[j]
Q = Q_list[[  dta.i[j,row]    ]]
t = dta.i[j,interval]
# c = Sys.time();P <-expm(  (t2-t1)*Q,method = "hybrid_Eigen_Ward",order = 17,tol = 10^-(40));   d = Sys.time()
# print(d-c)
P <-expm( t*Q)
P
}
P_list =     lapply(dt.p$row.p,function(j){
P_matrix(Q_list,dt.p,j)   } )
P_list =     lapply(dt.p$row.p,function(j){
prin(j)
P_matrix(Q_list,dt.p,j)   } )
P_list =     lapply(dt.p$row.p,function(j){
print(j)
P_matrix(Q_list,dt.p,j)   } )
View(dt.p)
View(dt.p)
Q_list[[6]]
Q_list[[7]]
j
j=6
# creating the P, here Q is assumed constant from t[j-1] to t[j]
Q = Q_list[[  dta.i[j,row]    ]]
t = dta.i[j,interval]
Q
P_matrix = function(Q_list,dt.p,j){
# creating the P, here Q is assumed constant from t[j-1] to t[j]
Q = Q_list[[  dt.p[j,row]    ]]
t = dt.p[j,interval]
# c = Sys.time();P <-expm(  (t2-t1)*Q,method = "hybrid_Eigen_Ward",order = 17,tol = 10^-(40));   d = Sys.time()
# print(d-c)
P <-expm( t*Q)
P
}
P_list =     lapply(dt.p$row.p,function(j){
print(j)
P_matrix(Q_list,dt.p,j)   } )
View(dta.s)
i=unique(dta$id)2
i=unique(dta$id)[1]
View(dta.p)
# Data for subject i:
dta.i <- dta.p[id==i,]
View(dta.i)
O     <- dta.i$state
t     <- dta.i$age
no_qpars = ((length(covariates_name)+1)*sum(Qm>0)) # number of parameters used for the Q matrix including the parameters for covariates
no_epars = ((length(E_covariates_name)+1)*sum(ematrix>0)) # number of parameters used for the E matrix including the parameters for covariates
mats(O,death_states,censored_state,corresponding_censored_states,dta.i,no_states,Q_list,E_list,P_list)
death_states
censored_state
corresponding_censored_states
dta.i
no_states
j=2
mat(O,j,death_states,censored_state,corresponding_censored_states,dta.i,no_states,Q_list,E_list,P_list)
dta.i[j-1,row]
dta.i
dta.i
Q_list[[  dta.i[j-1,row]    ]]
dta.i[j-1,row]
dta.i
Q = Q_list[[  dta.i[j-1,row]    ]]
dta.i[j-1,row.p]
P <-P_list[[  dta.i[j-1,row.p]    ]]
x = O[j]
x
col(Q_death)
Q_death=Q
censored_state
corresponding_censored_states
match(x,censored_state)
match(-1,censored_state)
dta_l = dta.i[1,]
x_l = O[1]
p_l
calc_initial_prob
ini_p
prob_mat = diag(c(1),no_states,no_states)[x_l,] %*% Reduce("%*%", mats_p)
prob_mat
mats_p
# Data for subject i:
dta.i <- dta.p[id==i,]
O     <- dta.i$state
t     <- dta.i$age
no_qpars = ((length(covariates_name)+1)*sum(Qm>0)) # number of parameters used for the Q matrix including the parameters for covariates
no_epars = ((length(E_covariates_name)+1)*sum(ematrix>0)) # number of parameters used for the E matrix including the parameters for covariates
#####################################matrix of likelhood probabilities from second observation#########################
#matrix of probabilities of transitioning from previous state including probability of misclassification
print(i)
mats_p=mats(O,death_states,censored_state,corresponding_censored_states,dta.i,no_states,Q_list,E_list,P_list)
dta_l = dta.i[1,]
x_l = O[1]
diag(c(1),no_states,no_states)[x_l,]
diag(c(1),no_states,no_states)
Reduce("%*%", mats_p)[x_l,]
Reduce("%*%", mats_p)
#####################The log likelihood contribution for subject i  #####################
prob_mat =  Reduce("%*%", mats_p)[x_l,]
prob_mat
#total likelihood of participant
contrib = sum(prob_mat)
L_i =  lapply(unique(dta$id),function(i){
# Data for subject i:
dta.i <- dta.p[id==i,]
O     <- dta.i$state
t     <- dta.i$age
no_qpars = ((length(covariates_name)+1)*sum(Qm>0)) # number of parameters used for the Q matrix including the parameters for covariates
no_epars = ((length(E_covariates_name)+1)*sum(ematrix>0)) # number of parameters used for the E matrix including the parameters for covariates
#####################################matrix of likelhood probabilities from second observation#########################
#matrix of probabilities of transitioning from previous state including probability of misclassification
print(i)
mats_p=mats(O,death_states,censored_state,corresponding_censored_states,dta.i,no_states,Q_list,E_list,P_list)
dta_l = dta.i[1,]
x_l = O[1]
#####################The log likelihood contribution for subject i  #####################
prob_mat =  Reduce("%*%", mats_p)[x_l,]
#total likelihood of participant
contrib = sum(prob_mat)
loglik = log(contrib)
# loglikelihood contribution for participant
#-loglik
#print(loglik)
loglik
})
#-log likelihood given the parameter set p
val = -Reduce("+", L_i)
d= Sys.time()
print(d-c)
print(val)
res$opt$value
res$opt$value/2
